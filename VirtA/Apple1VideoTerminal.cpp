//
//  Apple1VideoTerminal.cpp
//  Implementation of Apple1VideoTerminal class
//  Simulates an Apple 1 Video Terminal connected to an NTSC TV or monitor
//
//  Created by Lionel Pinkhard on 2017/07/12.
//
//  MIT License
//
//  Copyright (c) 2017 Lionel Pinkhard
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

#include <mutex>
#include <string>
#include <thread>
#include <vector>

#include <cstdio>
#include <cstring>

#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>

#include <OpenGL/gl.h>

#include "Apple1VideoTerminal.h"

#define PIXEL_WIDTH 240     // 40 characters, 6 pixels per character
#define PIXEL_HEIGHT 192    // 24 rows, 8 pixels per row

using namespace std;
using namespace chrono;

/**
 * Creates an instance of Apple1VideoTerminal
 * Takes a parameter that specifies a function callback to be notified of update requirements
 */
Apple1VideoTerminal::Apple1VideoTerminal(void (*callback)()) : Terminal(), callback(callback) {
    // Set up buffers and variable defaults
    displayReady = false;
    displayData = new uint8_t[PIXEL_WIDTH * PIXEL_HEIGHT * 3];
    tempBuffer = new uint8_t[PIXEL_WIDTH * PIXEL_HEIGHT];
    display = Display::getDisplay(DISPLAY_NTSC_WHITE);
    cursorRow = 0;
    cursorColumn = 0;
    cursorBlink = 0;
    
    // Create a texture
    glTexImage2D(GL_TEXTURE_2D, 0, 3, PIXEL_WIDTH, PIXEL_HEIGHT, 0, GL_RGB, GL_UNSIGNED_BYTE, (GLvoid *) displayData);
    
    // Set up the texture
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
    
    // Enable textures
    glEnable(GL_TEXTURE_2D);
    
    // Display is ready for drawing
    displayReady = true;
}

/**
 * Frees up the display buffers
 */
Apple1VideoTerminal::~Apple1VideoTerminal() {
    if (displayData != NULL) {
        delete[] displayData;
        displayData = NULL;
    }
    if (tempBuffer != NULL) {
        delete[] tempBuffer;
        tempBuffer = NULL;
    }
}

/**
 * Returns whether the display is ready for drawing
 */
uint8_t Apple1VideoTerminal::read() {
    if (displayReady)
        return 0x0;
    else
        return 0x80;
}

/**
 * Updates the buffers for rendering
 */
void Apple1VideoTerminal::update() {
    // Start at row 0, column 0
    int row = 0;
    int column = 0;
    
    // Make a copy of the characters to be displayed
    displayCharactersMutex.lock();
    vector<uint8_t> tmp(displayCharacters);
    displayCharactersMutex.unlock();
    
    // Clear the buffer
    memset(tempBuffer, 0, PIXEL_WIDTH * PIXEL_HEIGHT);
    
    // Draw all the characters
    for (vector<uint8_t>::iterator it = tmp.begin(); it != tmp.end(); ++it) {
        uint8_t character[40];
        getCharacter(*it, character);
        
        int offset = row * 240 * 8 + column * 6;
        int i = 0;
        for (int y = 0; y < 8; y++) {
            for (int x = 0; x < 5; x++) {
                tempBuffer[offset + y * 240 + x] = character[i++];
            }
        }
        
        // Next column
        column++;
        
        // Update the location
        if (column > 39) {
            if (row < 24) {
                row++;
            }
            column = 0;
        }
    }
    
    // Draw the cursor
    if (cursorBlink > 0) {
        uint8_t cursor[40];
        getCharacter(0, cursor);
        
        int offset = cursorRow * 240 * 8 + cursorColumn * 6;
        int i = 0;
        for (int y = 0; y < 8; y++) {
            for (int x = 0; x < 5; x++) {
                tempBuffer[offset + y * 240 + x] = cursor[i++] & cursorBlink;
            }
        }
    }
}

/**
 * Renders a frame onto the view
 */
void Apple1VideoTerminal::render(int width, int height) {
    // Update the buffers
    update();
    
    // Copy image from the temporary buffer to the display buffer
    for (int i = 0; i < PIXEL_HEIGHT * PIXEL_WIDTH; i++) {
        int offset = i * 3;
        displayData[offset] = (tempBuffer[i] & display.color.r) | display.bgColor.r;
        displayData[offset + 1] = (tempBuffer[i] & display.color.g) | display.bgColor.g;
        displayData[offset + 2] = (tempBuffer[i] & display.color.b) | display.bgColor.b;
    }
    
    // Prepare the texture for drawing the display
    glTexSubImage2D(GL_TEXTURE_2D, 0 ,0, 0, PIXEL_WIDTH, PIXEL_HEIGHT, GL_RGB, GL_UNSIGNED_BYTE, (GLvoid*) displayData);
    
    // Draw a quad simulating the Apple 1 display
    glBegin(GL_QUADS);
    glTexCoord2d(0.0, 0.0);
    glVertex2d(0.0, 0.0);
    glTexCoord2d(1.0, 0.0);
    glVertex2d(width, 0.0);
    glTexCoord2d(1.0, 1.0);
    glVertex2d(width, height);
    glTexCoord2d(0.0, 1.0);
    glVertex2d(0.0,	height);
    glEnd();
}

/**
 * Prepares the display for rendering with a given width and height
 */
void Apple1VideoTerminal::reshape(int width, int height) {
    // Set up polygon stipple for scanlines
    GLint i;
    GLubyte stipple[128];
    
    for (i=0; i < 128; i += 8) {
        stipple[i] = 0x00;
        stipple[i + 1] = 0x00;
        stipple[i + 2] = 0x00;
        stipple[i + 3] = 0x00;
        stipple[i + 4] = 0xff;
        stipple[i + 5] = 0xff;
        stipple[i + 6] = 0xff;
        stipple[i + 7] = 0xff;
    }
    
    // Enable the scanlines
    glPolygonStipple(stipple);
    glEnable(GL_POLYGON_STIPPLE);
    
    // Clear the background
    glClearColor(static_cast<float>(display.bgColor.r) / 255.0, static_cast<float>(display.bgColor.g) / 255.0,
                 static_cast<float>(display.bgColor.b) / 255.0, 0.0f);
    
    // Set up OpenGL projection
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0 - width / 10, width + width / 10,
            height + height / 13, 0 - height / 13, -1, 1);
    
    // Switch to model view
    glMatrixMode(GL_MODELVIEW);
    glViewport(0, 0, width, height);
}

/**
 * Writes characters to any open sockets
 */
void Apple1VideoTerminal::writeSockets(uint8_t value) {
    std::vector<int>::iterator it = sockets.begin();
    static int counter = 0;
    char buf[3];
    ssize_t numbytes = 1;
    
    buf[0] = value;
    if (counter >= 40) {
        buf[1] = '\n';
        numbytes++;
        counter = 0;
    }
    counter++;
    
    // Iterate all sockets
    while (it != sockets.end()) {
        // Send the data
        if (send(*it, buf, numbytes, 0) == -1) {
            // Close any sockets that are not working
            perror("send");
            shutdown(*it, SHUT_RDWR);
            close(*it);
            it = sockets.erase(it);
        } else {
            // Go to the next socket
            ++it;
        }
    }
}

/**
 * Writes the specified character to the vector of characters
 */
void Apple1VideoTerminal::write(uint8_t value) {
    // Store original value
    uint8_t rawValue = value;
    
    // Write to any open sockets
    socketsMutex.lock();
    if (value == 0xd)
        writeSockets('\n');
    else
        writeSockets(value & 0x7f);
    socketsMutex.unlock();
    
    // Start time
    static nanoseconds behind = nanoseconds(0);
    high_resolution_clock::time_point start_time = high_resolution_clock::now() - behind;
    
    if (value == 0xd) {     // CR
        displayCharactersMutex.lock();
        
        int spaces = 40 - cursorColumn;
        for (int i = 0 ; i < spaces; i++) {
            displayCharacters.push_back(0x20);  // Push CR to the back of the vector
            outputCharacters.push_back(' ');
        }
        
        displayCharactersMutex.unlock();
        
        // Move cursor to next row
        if (cursorRow < 23) {
            cursorRow++;
        }
        cursorColumn = 0;
        
        // Scroll the display
        while (displayCharacters.size() > 920) {
            displayCharacters.erase(displayCharacters.begin(), displayCharacters.begin() + 40);
            outputCharacters.erase(outputCharacters.begin(), outputCharacters.begin() + 40);
        }
    } else if (value == 0x1b) { // Ignore ESC
        return;
    } else {    // All other characters
     
        value ^= 0x40;  // flip bit 6
        value &= 0xDF;  // ignore bit 5
        
        if (value >= 0x40)
            value -= 0x20;
        
        displayCharactersMutex.lock();
        displayCharacters.push_back(value);     // Push the character to the back of the vector
        outputCharacters.push_back(rawValue);
        
        cursorColumn++;
        
        // Update the cursor position
        if (cursorColumn > 39) {
            if (cursorRow < 23) {
                cursorRow++;
            }
            cursorColumn = 0;
            
            socketsMutex.lock();
            writeSockets('\n');
            socketsMutex.unlock();
        }
        
        // Scroll the display
        while (displayCharacters.size() > 960) {
            displayCharacters.erase(displayCharacters.begin(), displayCharacters.begin() + 40);
            outputCharacters.erase(outputCharacters.begin(), outputCharacters.begin() + 40);
        }
        displayCharactersMutex.unlock();
    }
    
    // Terminal timing
    high_resolution_clock::time_point end_time = high_resolution_clock::now();
    nanoseconds exec_time = duration_cast<nanoseconds>(end_time - start_time);
    
    // Terminal processes at +/- 60 cps
    nanoseconds goal_time = nanoseconds(16666667);
    nanoseconds time_diff = goal_time - exec_time;
    if (time_diff.count() > 0) {
        this_thread::sleep_for(nanoseconds(time_diff));
    }
    end_time = high_resolution_clock::now();
    behind = end_time - (start_time + goal_time);
    
    // Notify callback that display needs updating
    callback();
}

/**
 * Timer method to blink the cursor
 */
void Apple1VideoTerminal::timer() {
    if (cursorBlink == 0xff) {
        cursorBlink = 0x0;
    } else {
        cursorBlink += 0x33;
    }
    
    // Notify callback that display has updated
    callback();
}

/**
 * Returns frequency of cursor blinks in seconds
 */
float Apple1VideoTerminal::timerDuration() {
    return 0.1;
}

/**
 * Returns the contents of the character output
 */
string Apple1VideoTerminal::getCharacters() {
    displayCharactersMutex.lock();
    string str(outputCharacters.begin(), outputCharacters.end());
    displayCharactersMutex.unlock();
    return str;
}

/**
 * Tracks an additional open socket
 */
void Apple1VideoTerminal::addSocket(int sock) {
    socketsMutex.lock();
    sockets.push_back(sock);
    socketsMutex.unlock();
}

/**
 * Returns the sockets mutex so changes to sockets can be synchronized across threads
 */
std::mutex *Apple1VideoTerminal::getSocketsMutex() {
    return &socketsMutex;
}

/**
 * Returns the pixels of a single character into the 2nd parameter, which should be uint8_t[40]
 */
void Apple1VideoTerminal::getCharacter(uint8_t index, uint8_t *character) {
    // Array of pixels for the characters (8-bit)
    static const uint8_t characterMap[] = {
        0x0, 0x0, 0x0, 0x0, 0x0,    // @
        0x0, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0xff, 0x0, 0xff,
        0xff, 0x0, 0xff, 0xff, 0xff,
        0xff, 0x0, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0x0, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // A
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0x0, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // B
        0xff, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // C
        0x0, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // D
        0xff, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // E
        0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // F
        0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // G
        0x0, 0xff, 0xff, 0xff, 0xff,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0xff, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // H
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // I
        0x0, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // J
        0x0, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // K
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0xff, 0x0,
        0xff, 0x0, 0xff, 0x0, 0x0,
        0xff, 0xff, 0x0, 0x0, 0x0,
        0xff, 0x0, 0xff, 0x0, 0x0,
        0xff, 0x0, 0x0, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // L
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // M
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0xff, 0x0, 0xff, 0xff,
        0xff, 0x0, 0xff, 0x0, 0xff,
        0xff, 0x0, 0xff, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // N
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0xff, 0x0, 0x0, 0xff,
        0xff, 0x0, 0xff, 0x0, 0xff,
        0xff, 0x0, 0x0, 0xff, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // O
        0x0, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // P
        0xff, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // Q
        0x0, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0xff, 0x0, 0xff,
        0xff, 0x0, 0x0, 0xff, 0x0,
        0x0, 0xff, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // R
        0xff, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0xff, 0x0, 0x0,
        0xff, 0x0, 0x0, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // S
        0x0, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0x0, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // T
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // U
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // V
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0xff, 0x0, 0xff, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // W
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0xff, 0x0, 0xff,
        0xff, 0x0, 0xff, 0x0, 0xff,
        0xff, 0xff, 0x0, 0xff, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // X
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0xff, 0x0, 0xff, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0x0, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // Y
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0xff, 0x0, 0xff, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // Z
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0xff, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // [
        0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // backslash
        0x0, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0x0, 0xff, 0x0, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // ]
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0xff, 0xff,
        0x0, 0x0, 0x0, 0xff, 0xff,
        0x0, 0x0, 0x0, 0xff, 0xff,
        0x0, 0x0, 0x0, 0xff, 0xff,
        0x0, 0x0, 0x0, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // ^
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0x0, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // _
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // space
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // !
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // "
        0x0, 0xff, 0x0, 0xff, 0x0,
        0x0, 0xff, 0x0, 0xff, 0x0,
        0x0, 0xff, 0x0, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // #
        0x0, 0xff, 0x0, 0xff, 0x0,
        0x0, 0xff, 0x0, 0xff, 0x0,
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0xff, 0x0, 0xff, 0x0,
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0xff, 0x0, 0xff, 0x0,
        0x0, 0xff, 0x0, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // $
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0xff, 0xff, 0xff,
        0xff, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0xff, 0x0, 0xff,
        0xff, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // %
        0xff, 0xff, 0x0, 0x0, 0x0,
        0xff, 0xff, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0xff, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0xff, 0xff,
        0x0, 0x0, 0x0, 0xff, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // &
        0x0, 0xff, 0x0, 0x0, 0x0,
        0xff, 0x0, 0xff, 0x0, 0x0,
        0xff, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0x0, 0x0, 0x0,
        0xff, 0x0, 0xff, 0x0, 0xff,
        0xff, 0x0, 0x0, 0xff, 0x0,
        0x0, 0xff, 0xff, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // '
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // (
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0x0, 0xff, 0x0, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // )
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0xff, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // *
        0x0, 0x0, 0xff, 0x0, 0x0,
        0xff, 0x0, 0xff, 0x0, 0xff,
        0x0, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0xff, 0x0, 0xff,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // +
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // ,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // -
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // .
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // /
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0xff, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // 0
        0x0, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0xff, 0xff,
        0xff, 0x0, 0xff, 0x0, 0xff,
        0xff, 0xff, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // 1
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // 2
        0x0, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0xff, 0xff, 0x0,
        0x0, 0xff, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,    // 3
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0xff, 0x0,
        0x0, 0x0, 0xff, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // 4
        0x0, 0x0, 0x0, 0xff, 0x0,
        0x0, 0x0, 0xff, 0xff, 0x0,
        0x0, 0xff, 0x0, 0xff, 0x0,
        0xff, 0x0, 0x0, 0xff, 0x0,
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0xff, 0x0,
        0x0, 0x0, 0x0, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // 5
        0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // 6
        0x0, 0x0, 0xff, 0xff, 0xff,
        0x0, 0xff, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0xff, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // 7
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0xff, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0x0, 0x0, 0x0,
        0x0, 0xff, 0x0, 0x0, 0x0,
        0x0, 0xff, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // 8
        0x0, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0xff, 0xff, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // 9
        0x0, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0xff, 0x0,
        0xff, 0xff, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // :
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // ;
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // <
        0x0, 0x0, 0x0, 0xff, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0x0, 0x0, 0x0,
        0xff, 0x0, 0x0, 0x0, 0x0,
        0x0, 0xff, 0x0, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // =
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0xff, 0xff, 0xff, 0xff, 0xff,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // >
        0x0, 0xff, 0x0, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0xff, 0x0,
        0x0, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0xff, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0xff, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,    // ?
        0x0, 0xff, 0xff, 0xff, 0x0,
        0xff, 0x0, 0x0, 0x0, 0xff,
        0x0, 0x0, 0x0, 0xff, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0xff, 0x0, 0x0
    };
    
    // Copy character into the pointer
    memcpy(character, characterMap + index * 40, 40);
}
